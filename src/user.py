"""
"""

from src.database import db_access as dba



class UserProfile:
    """
    """
    def __init__(self, user_id):
        self.user_id = user_id
        self.top_strengths = []
        self.bot_strengths = []

        self.student_info = {}

        # Generated by the agent from the assessment responses
        self.strengths_summary = ''

        # Generated by the agent from the assessment analysis
        self.assessment_analysis = ''

        self.assessment_responses = {}

        # Filled in by the build_student_profile() method
        self.student_md_profile = ''

        self.reload_all_data()

    def load_topbot_strengths(self):
        """ Loads the top strengths and weaknesses (bot strengths) of the user. """
        self.top_strengths, self.bot_strengths = dba.get_topbot_strengths(self.user_id, k=5)
        from icecream import ic
        ic(self.top_strengths)

    def load_student_info(self):
        """ Loads the `students` table - things like name, address, etc. """
        self.student_info = dba.get_student_info(self.user_id)

    def load_assessment_responses(self):
        """ Loads the assessment responses of the user. """
        self.assessment_responses = dba.load_assessment_responses(self.user_id)

    def reload_all_data(self):
        """ Reloads the user data from the database. """
        self.load_student_info()
        self.load_topbot_strengths()
        self.load_assessment_responses()
        self.build_student_profile()
        self.assessment_analysis = dba.load_assessment_analysis(self.user_id)

    def build_student_profile(self):
        """
        Builds a markdown formatted bio of the user specifically for the LLM to analyze.
        """
        # Personal Information
        personal_info = f"""
    # Student Profile

    ## Personal Information
    - **First Name:** {self.student_info['first_name'] or 'N/A'}
    - **Last Name:** {self.student_info['last_name'] or 'N/A'}
    - **Age:** {self.student_info['age'] or 'N/A'}
    - **Gender:** {self.student_info['gender'] or 'N/A'}
    - **City:** {self.student_info['city'] or 'N/A'}
    - **State:** {self.student_info['state'] or 'N/A'}
    """

        # Academic Information
        academic_info = f"""
    ## Academic Information
    - **High School:** {self.student_info['high_school'] or 'N/A'}
    - **Graduation Year:** {self.student_info['high_school_grad_year'] or 'N/A'}
    - **GPA:** {self.student_info['gpa'] or 'N/A'}
    - **SAT Score:** {self.student_info['sat_score'] or 'N/A'}
    - **ACT Score:** {self.student_info['act_score'] or 'N/A'}
    - **Favorite Subjects:** {self.student_info['favorite_subjects'] or 'N/A'}
    - **Extracurriculars:** {self.student_info['extracurriculars'] or 'N/A'}
    """

        # Career Aspirations
        career_info = f"""
    ## Career Aspirations
    - **Desired Career:** {self.student_info['career_aspirations'] or 'N/A'}
    - **Preferred Major:** {self.student_info['preferred_major'] or 'N/A'}
    - **Other Majors of Interest:** {self.student_info['other_majors'] or 'N/A'}
    """

        # Assessment Results
        top_strengths = ", ".join([s['theme_name'] for s in self.top_strengths]) if self.top_strengths else 'N/A'
        bot_strengths = ", ".join([w['theme_name'] for w in self.bot_strengths]) if self.bot_strengths else 'N/A'

        print('SELF.TOP_STRENGTHS:', self.top_strengths, '\n\n')
        print('TOP STRENGTHS:', top_strengths)

        assessment_results = f"""
    ## Assessment Results

    ### Assessment Analysis
    {self.assessment_analysis}

    ### Top Strengths
    {top_strengths}

    ### Areas for Improvement
    {bot_strengths}
    """

        # Combine all sections
        self.student_md_profile = personal_info + academic_info + career_info + assessment_results

class User:
    """
    """

    def __init__(self, user_id, username, session_id):
        """ Initializes the user object. """
        self.user_id = user_id
        self.username = username
        self.session_id = session_id
